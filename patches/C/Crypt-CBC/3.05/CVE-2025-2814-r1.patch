From 37111f7cd894bcec46156ba7f40a49c126ebf535 Mon Sep 17 00:00:00 2001
From: Robert Rothenberg <rrwo@cpan.org>
Date: Sat, 14 Jun 2025 14:34:29 +0100
Subject: [PATCH] Fix CVE-2025-2814 by using Crypt::URandom to read random
 bytes

Crypt::URandom will retrieve random bytes from system sources without
reverting to the Perl `rand()` function (which is not secure).

This fixes #9.
---
 Makefile.PL      |  1 +
 lib/Crypt/CBC.pm | 18 +++++-------------
 3 files changed, 9 insertions(+), 13 deletions(-)

diff --git a/Makefile.PL b/Makefile.PL
index 5ad7e48..55edc2e 100644
--- a/Makefile.PL
+++ b/Makefile.PL
@@ -9,6 +9,7 @@ WriteMakefile(
 	'Digest::SHA'        => 0,
         'Crypt::PBKDF2'      => 0,
 	'Crypt::Cipher::AES' => 0,
+	'Crypt::URandom'     => 0,
     },
     'LIBS'	=> [''],   # e.g., '-lm' 
     'DEFINE'	=> '',     # e.g., '-DHAVE_SOMETHING' 
diff --git a/lib/Crypt/CBC.pm b/lib/Crypt/CBC.pm
index be1575a..a0a9482 100644
--- a/lib/Crypt/CBC.pm
+++ b/lib/Crypt/CBC.pm
@@ -3,12 +3,12 @@ package Crypt::CBC;
 use strict;
 use Carp 'croak','carp';
 use Crypt::CBC::PBKDF;
+use Crypt::URandom ();
 use bytes;
 use vars qw($VERSION);
 no warnings 'uninitialized';
 $VERSION = '3.04';
 
-use constant RANDOM_DEVICE      => '/dev/urandom';
 use constant DEFAULT_PBKDF      => 'opensslv1';
 use constant DEFAULT_ITER       => 10_000;  # same as OpenSSL default
 
@@ -767,14 +767,7 @@ sub random_bytes {
 sub _get_random_bytes {
   my $self   = shift;
   my $length = shift;
-  my $result;
-
-  if (-r RANDOM_DEVICE && open(F,RANDOM_DEVICE)) {
-    read(F,$result,$length);
-    close F;
-  } else {
-    $result = pack("C*",map {rand(256)} 1..$length);
-  }
+  my $result = Crypt::URandom::urandom($length);
   # Clear taint and check length
   $result =~ /^(.+)$/s;
   length($1) == $length or croak "Invalid length while gathering $length random bytes";
@@ -1430,10 +1423,9 @@ B<literal_key> is false.
 
 =head2 $data = random_bytes($numbytes)
 
-Return $numbytes worth of random data. On systems that support the
-"/dev/urandom" device file, this data will be read from the
-device. Otherwise, it will be generated by repeated calls to the Perl
-rand() function.
+Return $numbytes worth of random data, using L<Crypt::URandom>, which
+will read data from the system's source of random bytes, such as
+F</dev/urandom>.
 
 =head2 cipher(), pbkdf(), padding(), keysize(), blocksize(), chain_mode() 
 
