From ad2c03aad95406db4ce35dfb670664ebde004c18 Mon Sep 17 00:00:00 2001
From: Robert Rothenberg <rrwo@cpan.org>
Date: Sun, 3 Aug 2025 14:18:20 +0100
Subject: [PATCH] Use Crypt::SysRandom to generate nonces instead of Data::UUID

The nonce should be generated from a strong cryptographic source as per
RFC 7616.

Data::UUID generates v3 UUIDs, which are generated from known
information and are unsuitable for security, as per RFC 9562.

Data::UUID does not use a strong cryptographic source for generating
UUIDs.
---
 dist.ini                                       |  1 +
 lib/Catalyst/Authentication/Credential/HTTP.pm | 13 ++++++++++---
 2 files changed, 11 insertions(+), 3 deletions(-)

diff --git a/dist.ini b/dist.ini
index 2f66a7f..ad07ae5 100644
--- a/dist.ini
+++ b/dist.ini
@@ -22,6 +22,7 @@ StaticInstall.dry_run = 0   ; we can safely set this here
 
 [Prereqs]
 Catalyst::Plugin::Authentication = 0.10005
+Crypt::SysRandom = 0
 
 [Prereqs / DevelopRequires]
 Test::WWW::Mechanize::Catalyst = 0.51
diff --git a/lib/Catalyst/Authentication/Credential/HTTP.pm b/lib/Catalyst/Authentication/Credential/HTTP.pm
index c139ee2..8ceb0ae 100644
--- a/lib/Catalyst/Authentication/Credential/HTTP.pm
+++ b/lib/Catalyst/Authentication/Credential/HTTP.pm
@@ -380,7 +380,9 @@ package # hide from PAUSE
 
 use strict;
 use base qw[ Class::Accessor::Fast ];
-use Data::UUID 0.11 ();
+use Crypt::SysRandom;
+
+# RECOMMEND PRERQ: Crypt::SysRandom::XS 0.009
 
 __PACKAGE__->mk_accessors(qw[ nonce nonce_count qop opaque algorithm ]);
 
@@ -388,8 +390,8 @@ sub new {
     my $class = shift;
     my $self  = $class->SUPER::new(@_);
 
-    $self->nonce( Data::UUID->new->create_b64 );
-    $self->opaque( Data::UUID->new->create_b64 );
+    $self->nonce( $self->_generate_nonce );
+    $self->opaque( $self->_generate_nonce );
     $self->qop('auth,auth-int');
     $self->nonce_count('0x0');
     $self->algorithm('MD5');
@@ -397,6 +399,11 @@ sub new {
     return $self;
 }
 
+sub _generate_nonce {
+    return unpack('H*', Crypt::SysRandom::random_bytes(20));
+}
+
+
 1;
 
 __END__
